plugins {
    id 'java'
    id 'io.freefair.lombok' version '8.6'
    id 'org.springframework.boot' version '2.7.17'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'jacoco'
    id 'org.sonarqube' version '5.0.0.4638'
    id 'maven-publish'
}

group = 'com.iexec.worker'

ext {
    springCloudVersion = '2021.0.8'
    commonsMathsVersion = '3.6.1'
}

if (!project.hasProperty('gitBranch')) {
    ext.gitBranch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
}

if (gitBranch != 'main' && gitBranch != 'master' && !(gitBranch ==~ '(release|hotfix|support)/.*')) {
    version += '-NEXT-SNAPSHOT'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://docker-regis-adm.iex.ec/repository/maven-public/"
        credentials {
            username nexusUser
            password nexusPassword
        }
    }
    maven {
        url "https://jitpack.io"
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    // iexec
    implementation "com.iexec.commons:iexec-commons-poco:$iexecCommonsPocoVersion"
    implementation "com.iexec.common:iexec-common:$iexecCommonVersion"
    implementation "com.iexec.commons:iexec-commons-containers:$iexecCommonsContainersVersion"
    implementation "com.iexec.blockchain:iexec-blockchain-adapter-api-library:$iexecBlockchainAdapterVersion"
    implementation "com.iexec.result-proxy:iexec-result-proxy-library:$iexecResultVersion"
    implementation "com.iexec.sms:iexec-sms-library:$iexecSmsVersion"

    // spring
    implementation "org.springframework.boot:spring-boot-starter"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-websocket"
    implementation "org.springframework.cloud:spring-cloud-starter"
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign"
    implementation "org.springframework.retry:spring-retry"

    // apache commons-lang3
    implementation 'org.apache.commons:commons-lang3'

    // Apache commons-math3
    implementation "org.apache.commons:commons-math3:${commonsMathsVersion}"

    // Required for com.iexec.worker.feign.config.RestTemplateConfig
    implementation 'org.apache.httpcomponents:httpclient'

    implementation 'org.glassfish.jersey.inject:jersey-hk2'
    implementation 'org.glassfish.jersey.bundles.repackaged:jersey-guava:2.25.1'
    implementation 'javax.activation:activation:1.1.1'

    // Removes 'warning: unknown enum constant When.MAYBE'
    implementation 'com.google.code.findbugs:annotations:3.0.1'

    // observability
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    // expiring map
    implementation 'net.jodah:expiringmap:0.5.10'
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
    sourceCompatibility = "11"
    targetCompatibility = "11"
}

springBoot {
    buildInfo()
}

tasks.named("bootJar") {
    manifest {
        attributes("Implementation-Title": "iExec Worker",
                "Implementation-Version": project.version)
    }
}

testing {
    suites {
        test {
            useJUnitJupiter()
            dependencies {
                implementation "org.springframework.boot:spring-boot-starter-test"
                implementation "org.mockito:mockito-inline" // activates mocking final classes/methods

                // awaitility
                implementation "org.awaitility:awaitility"
            }
        }
    }
}

tasks.withType(Test).configureEach {
    finalizedBy jacocoTestReport
}

tasks.register('itest') {
    group 'Verification'
    description 'Runs the integration tests.'
}

// sonarqube code coverage requires jacoco XML report
jacocoTestReport {
    reports {
        xml.required = true
    }
}
tasks.sonarqube.dependsOn tasks.jacocoTestReport

publishing {
    publications {
        maven(MavenPublication) {
            artifact tasks.named("bootJar")
            from components.java
        }
    }
    repositories {
        maven {
            credentials {
                username nexusUser
                password nexusPassword
            }
            url project.hasProperty('nexusUrl') ? nexusUrl : ''
        }
    }
}

ext.jarPathForOCI = relativePath(tasks.bootJar.outputs.files.singleFile)
ext.gitShortCommit = 'git rev-parse --short=8 HEAD'.execute().text.trim()
ext.ociImageName = 'local/' + ['bash', '-c', 'basename $(git config --get remote.origin.url) .git'].execute().text.trim()

tasks.register('buildImage', Exec) {
    group 'Build'
    description 'Builds an OCI image from a Dockerfile.'
    dependsOn bootJar
    commandLine 'docker', 'build', '--build-arg', 'jar=' + jarPathForOCI, '-t', ociImageName + ':dev', '.'
}

// ##################
// #     proxy     #
// ##################

//gradle bootRun -PproxyHost=192.168.XX.XXX -PproxyPort=3128
project.ext.getJvmArgs = {
    if (project.hasProperty("proxyHost") && project.hasProperty("proxyPort")) {
        return ["-Dhttp.proxyHost=" + project.proxyHost, "-Dhttp.proxyPort=" + project.proxyPort]
    } else {
        return []
    }
}

bootRun {
    jvmArgs = project.ext.getJvmArgs()
}
