import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.4.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'eclipse'
    id 'jacoco'
    id 'org.sonarqube' version '3.3'
    id 'maven-publish'
}

group = 'com.iexec.worker'
sourceCompatibility = 11
targetCompatibility = 11

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        url "https://nexus.iex.ec/repository/maven-public/"
    }
    maven {
        url "https://jitpack.io"
    }
}

configurations {
    all {
        // Exclude JUnit 4. Only JUnit 5 is used
        exclude group: 'junit', module: 'junit'
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}


ext {
    springCloudVersion = '2020.0.1'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    // iexec
    implementation "com.iexec.common:iexec-common:$iexecCommonVersion"

    // spring
    implementation("org.springframework.boot:spring-boot-starter") {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging' //required for Graylog
    }
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-websocket"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation  "org.springframework.cloud:spring-cloud-starter"
    implementation  "org.springframework.cloud:spring-cloud-starter-openfeign"
    implementation  "org.springframework.retry:spring-retry"
    testImplementation "org.springframework.boot:spring-boot-starter-test"

    // Web3j issues, see core build.gradle
    implementation 'com.squareup.okhttp3:okhttp:4.3.1'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.3.50'

    // docker
    implementation 'com.github.docker-java:docker-java:3.2.5'
    implementation 'com.github.docker-java:docker-java-transport-httpclient5:3.2.5'

    implementation 'org.glassfish.jersey.inject:jersey-hk2:2.26'
    implementation 'org.glassfish.jersey.bundles.repackaged:jersey-guava:2.25.1'
    implementation 'javax.activation:activation:1.1.1'

    // Removes 'warning: unknown enum constant When.MAYBE'
    implementation 'com.google.code.findbugs:annotations:3.0.1'

    //graylog
    implementation 'biz.paluch.logging:logstash-gelf:1.5.1'

    // lombok
    compileOnly "org.projectlombok:lombok:1.18.2"
    annotationProcessor "org.projectlombok:lombok:1.18.2"
}

// ./gradlew build -Pdev
def isDev = project.hasProperty('dev')

jar {
    enabled true
    archiveClassifier.set('library')
}

test {
    useJUnitPlatform {
        // Ignore slow tests in development
        if (isDev) {
            excludeTags 'slow'
        }
    }
}

task itest {
    group 'Verification'
    description 'Runs the integration tests.'
}

jacoco {
    toolVersion = "0.8.7"
}
// sonarqube code coverage requires jacoco XML report
jacocoTestReport {
    reports {
        xml.enabled true
    }
}
tasks.test.finalizedBy    tasks.jacocoTestReport
tasks.sonarqube.dependsOn tasks.jacocoTestReport

task createVersion(type: Copy) {
    // delete old one
    delete 'src/main/java/com/iexec/worker/utils/version/Version.java'
    // use and copy template to the new location
    from 'src/main/resources/Version.java.template'
    into 'src/main/java/com/iexec/worker/utils/version/'

    rename { String fileName ->
        fileName.replace('.template', '')
    }
    // replace tokens in the template file
    filter(ReplaceTokens, tokens: [projectversion: "${version}".toString()])
}
// the createVersion task should be called before compileJava or the version service will not work
compileJava.dependsOn createVersion

publishing {
    publications {
        maven(MavenPublication) {
            artifact bootJar
            from components.java
        }
    }
    repositories {
        maven {
            credentials {
                username project.hasProperty('nexusUser') ? nexusUser : ''
                password project.hasProperty('nexusPassword') ? nexusPassword : ''
            }
            url project.hasProperty('nexusUrl') ? nexusUrl : ''
        }
    }
}

ext.bootJarPath    = relativePath(tasks.bootJar.outputs.files.singleFile)
ext.gitShortCommit = 'git rev-parse --short=8 HEAD'.execute().text.trim()
ext.ociImageName   = 'local/' + ['bash', '-c', 'basename $(git config --get remote.origin.url) .git'].execute().text.trim()

task buildImage(type: Exec) {
    group       'Build'
    description 'Builds an OCI image from a Dockerfile.'
    dependsOn    bootJar
    commandLine ("sh", "-c", "docker build --build-arg spring_boot_jar=$bootJarPath -t $ociImageName:$gitShortCommit ."
            + " && docker tag $ociImageName:$gitShortCommit $ociImageName:dev")
}

// ##################
// #     proxy     #
// ##################

//gradle bootRun -PproxyHost=192.168.XX.XXX -PproxyPort=3128
project.ext.getJvmArgs = {
    if (project.hasProperty("proxyHost") && project.hasProperty("proxyPort")) {
        return ["-Dhttp.proxyHost="+project.proxyHost, "-Dhttp.proxyPort="+project.proxyPort]
    } else {
        return  []
    }
}

bootRun {
    jvmArgs = project.ext.getJvmArgs()
}
